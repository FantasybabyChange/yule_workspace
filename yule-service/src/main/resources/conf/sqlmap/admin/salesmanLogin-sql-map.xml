<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yule.admin.dao.ISalesmanLoginDao">
	<resultMap type="salesmanLogin" id="salesmanLogin-sql-map">
		<id     property="id"          column="ID" />
		<result property="account"        column="ACCOUNT" />
		<result property="password"        column="PASSWORD" />
		<result property="login_time"        column="LOGIN_TIME" />
		<result property="is_delete"        column="IS_DELETE" />
		<result property="status"        column="STATUS" />
		<result property="create_time"        column="CREATE_TIME" />
		<result property="update_time"        column="UPDATE_TIME" />
	</resultMap>
	<resultMap type="salesmanVo" id="salesmanVo-sql-map">
		<id     property="id"          column="ID" />
		<result property="account"        column="ACCOUNT" />
		<result property="name"        column="NAME" />
		<result property="is_delete"        column="IS_DELETE" />
		<result property="status"        column="STATUS" />
		<result property="image_path"        column="IMAGE_PATH" />
		<result property="login_time"        column="LOGIN_TIME" />
		<result property="create_time"        column="CREATE_TIME" />
		<result property="identity_card_image_path"        column="IDENTITY_CARD_IMAGE_PATH" />
	</resultMap>
	<insert id="insertSalesmanLogin" parameterType="salesmanLogin">
		insert into salesman_login(
			ID,ACCOUNT,PASSWORD,IS_DELETE,STATUS,CREATE_TIME
		)
		values(#{id},#{account},#{password},#{is_delete},#{status},now())
	</insert>
	<update id="updateSalesmanLogin" parameterType="salesmanLogin">
		update  salesman_login
		<set>
		<if test="account !=null and account !=''">
		ACCOUNT = #{account} ,
		</if>
		<if test="password !=null and password !=''">
		PASSWORD = #{password} ,
		</if>
		<if test="login_time !=null and login_time !=''">
		LOGIN_TIME = #{login_time} ,
		</if>
		<if test="is_delete !=null ">
		IS_DELETE = #{is_delete} ,
		</if>
		<if test="status !=null">
		STATUS = #{status} ,
		</if>
		UPDATE_TIME = now()
		</set>
		WHERE ID = #{id}
	</update>
	<select id="findSalesmanVOPage" parameterType="map" resultMap="salesmanVo-sql-map" >
	SELECT ss.id,ss.account,ss.is_delete,ss.status,ss.login_time,ss.create_time,s.name,s.image_path,s.identity_card_image_path FROM salesman_login ss
		LEFT JOIN salesman s ON ss.id=s.id
		<where>
			 1=1
		    <if test="account != null and account != ''">
			 AND ss.ACCOUNT like "%"#{account}"%"
			</if>
			<if test="name != null and name !='' ">
			AND	s.NAME like  "%"#{name}"%"
			</if>
			<if test="(start_time != null and start_time != '') and (end_time=='' or end_time==null)">
			AND ss.create_time between #{start_time} and now()
			</if>
			<if test="(end_time != null and end_time != '') and (start_time=='' or start_time==null)">
			AND	ss.create_time between 0 and #{end_time}
			</if>
			<if test="(start_time != null and start_time != '') and (end_time!='' and end_time!=null)">
			AND	ss.create_time between #{start_time} and #{end_time}
			</if>	
			<if test="status != null  ">
			AND	ss.STATUS = #{status}
			</if>							
			<if test="is_delete != null  ">
			AND	ss.IS_DELETE = #{is_delete}
			</if>
		</where>	
			ORDER BY ss.create_time DESC
			LIMIT #{pageStart},#{pageEnd} 
	</select>
	
	<select id="findSalesmanVOCount" parameterType="map" resultType="int" >
	SELECT count(ss.id) FROM salesman_login ss
		LEFT JOIN salesman s ON ss.id=s.id
		<where>
			 1=1
		    <if test="account != null and account != ''">
			 AND ss.ACCOUNT like "%"#{account}"%"
			</if>
			<if test="name != null and name !='' ">
			AND	s.NAME like  "%"#{name}"%"
			</if>
			<if test="(start_time != null and start_time != '') and (end_time=='' or end_time==null)">
			AND ss.create_time between #{start_time} and now()
			</if>
			<if test="(end_time != null and end_time != '') and (start_time=='' or start_time==null)">
			AND	ss.create_time between 0 and #{end_time}
			</if>
			<if test="(start_time != null and start_time != '') and (end_time!='' and end_time!=null)">
			AND	ss.create_time between #{start_time} and #{end_time}
			</if>				
			<if test="status != null  ">
			AND	ss.STATUS = #{status}
			</if>							
			<if test="is_delete != null ">
			AND	ss.IS_DELETE = #{is_delete}
			</if>
		</where>	
	</select>
	<select id="findSalesmanLoginByAccount" parameterType="string" resultType="int" >
	SELECT count(ss.id) FROM salesman_login ss
		<where>
		ss.ACCOUNT=#{account}
		</where>	
	</select>
	<select id="findSalesmanLoginList"  resultMap="salesmanLogin-sql-map" >
	SELECT ID,ACCOUNT FROM salesman_login 
	</select>
</mapper>
